基于Spring-boot的微架构，旨在集成所有可能用到的技术；做到轻|小|快
项目版本说明：
	0-wdw-jar : 基于jar直接运行
	1-wdw-war : 基于war部署方式，方便web应用加载静态文件；
	2-wdw-tomcat : 集成Tomcat的各种配置
	3-wdw-log4j2 : 集成log4j2的各种配置
	4-wdw-h2 : 集成h2database的各种配置
	
*注 ：
	1. n -> (n+1)表示在n代码的基础上集成(n+1)新技术；目的在于方便项目代码选取；比如我只想测试一个rest服务，取 0-wdw-jar代码即可完成；
	2. 3。n-wdw-mybatis : 表示myBatis集成的各种小技术；比如mybatis分页，批处理等；
	
-------------------------------------------------------------------------------

直接借鉴了Spring-Boot官网demo；
ＵＲＬ　：https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples/spring-boot-sample-actuator-log4j2


---- h2 -----
添加jpa，h2的依赖

spring.h2.console.enabled=true   h2的控制台设置
spring.h2.console.path=/h2       h2控制台context-path/  *******注意 ： /h2是挂在Tomcat context-path目录下的；http://localhost:9091/wdw/h2/

H2-console登录界面可以设置驱动，用户名等；一旦设置后，boot想要连接就要有如下配置，用来做为h2的数据连接；
spring.jpa.show-sql = true ： 是否显示sql语句
spring.datasource.url = jdbc:h2:file:D:\\test\\db\\testdb   :绝对路径，数据本地化 ;  ; h2-console登录的设置存在路径
#spring.datasource.url = jdbc:h2:file:~/.h2/testdb	 ：相对路径，数据本地化
#spring.datasource.username = sa
#spring.datasource.password = sa
#spring.datasource.driverClassName = org.h2.Driver

# 配置加载表结构sql；
spring.datasource.schema=classpath:h2/schema1.sql,classpath:h2/schema2.sql
spring.datasource.platform=classpath:h2/data.sql
参考源码：
	String schema = this.properties.getSchema();
			if (schema == null) {
				String platform = this.properties.getPlatform();
				schema = "classpath*:schema-" + platform + ".sql,";
				schema = schema + "classpath*:schema.sql,";
				schema = schema + "classpath*:data-" + platform + ".sql,";
				schema = schema + "classpath*:data.sql";
			}
	
			List resources = getSchemaResources(schema);


Spring Boot 很多都是基于自动配置的；如上述源码，所以默认加载。通过配置文件可以修改默认配置；

自动集成JDBCTemplate，所以可以直接用
	@Autowired
	private JdbcTemplate jdbcTemplate;
	





	
	